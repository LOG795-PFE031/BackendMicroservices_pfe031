services:
  auth-service:
    container_name: auth-service
    hostname: auth-service
    image: auth-service
    ports:
      - "55604:8081"
    build:
      context: .
      dockerfile: AuthService/Dockerfile
    networks:
      - microservices_auth
    depends_on:
      - postgres
      - mongo
      - azurite
      - rabbitmq

  stock:
    container_name: stock-service
    image: stock-service
    ports:
      - "55611:8081"
    build:
      context: .
      dockerfile: Stock/Dockerfile
    networks:
      - microservices_auth
    depends_on:
      - auth-service

  news:
    container_name: news-service
    image: news-service
    ports:
      - "55613:8081"
    build:
      context: .
      dockerfile: News/Dockerfile
    networks:
      - microservices_auth
    depends_on:
      - auth-service

  portfolio:
    container_name: portfolio-service
    image: portfolio-service
    ports:
      - "55616:8081"
    build:
      context: .
      dockerfile: Portfolio/Dockerfile
    networks:
      - microservices_auth
    depends_on:
      - stock

  time:
    container_name: time-service
    image: time-service
    ports:
      - "55623:8081"
    build:
      context: .
      dockerfile: Time/Dockerfile
    networks:
      - microservices_auth
    depends_on:
      - portfolio

  postgres:
    container_name: sql
    image: postgres:latest
    hostname: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    networks:
      - microservices_auth

  mongo:
    container_name: mongodb
    image: "mongo:8.0.5"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - "27017:27017"
    networks:
      - microservices_auth

  azurite:
    container_name: azurite
    image: "mcr.microsoft.com/azure-storage/azurite:latest"
    restart: always
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    networks:
      - microservices_auth

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: "rabbitmq:3.13.7-management"
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microservices_auth

networks:
  microservices_auth:
    name: microservices_auth
    driver: bridge
